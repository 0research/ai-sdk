"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _lruCache = require("lru-cache");

var _lruCache2 = _interopRequireDefault(_lruCache);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var LRURenderCache = function () {
	function LRURenderCache() {
		var _this = this;

		var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

		_classCallCheck(this, LRURenderCache);

		if (Number.isInteger(options)) {
			options = {
				max: options
			};
		}

		var originalDispose = options.dispose;

		this.lruCache = (0, _lruCache2.default)({
			max: options.max || 128 * 1024 * 1024,

			length: function length(value, key) {
				return value.value.length + value.key.length * 2;
			},

			dispose: function dispose(key, value) {
				var componentMap = _this._getComponentMap(value.component);
				componentMap.delete(value.key);
				if (componentMap.size === 0) {
					_this.map.delete(value.component);
				}
				originalDispose(key, value);
			}
		});

		this.map = new Map();
	}

	_createClass(LRURenderCache, [{
		key: "get",
		value: function get(component, key) {
			var lruCacheKey = this._getComponentMap(component).get(key);
			var storedValue = this.lruCache.get(lruCacheKey);
			if ((typeof storedValue === "undefined" ? "undefined" : _typeof(storedValue)) === "object") {
				return storedValue.value;
			}
			return undefined;
		}
	}, {
		key: "set",
		value: function set(component, key, value) {
			var lruCacheKey = {};
			this._getComponentMap(component).set(key, lruCacheKey);
			this.lruCache.set(lruCacheKey, { component: component, key: key, value: value });
		}
	}, {
		key: "_getComponentMap",
		value: function _getComponentMap(component) {
			var componentMap = this.map.get(component);

			if (!componentMap) {
				componentMap = new Map();
				this.map.set(component, componentMap);
			}

			return componentMap;
		}
	}]);

	return LRURenderCache;
}();

exports.default = function (options) {
	return new LRURenderCache(options);
};